const { app, BrowserWindow, Menu, ipcMain, dialog, shell, Tray, nativeImage } = require('electron');
const path = require('path');
const fs = require('fs');
const { spawn } = require('child_process');
const log = require('electron-log');
const { autoUpdater } = require('electron-updater');
const dotenv = require('dotenv');
const http = require('http');
const url = require('url');

// ---- Basics -----------------------------------------------------------------
const isDev = process.env.NODE_ENV === 'development' || process.argv.includes('--dev');
const isMac = process.platform === 'darwin';
const projectRoot = app.isPackaged
  ? path.join(process.resourcesPath, 'app')
  : path.resolve(__dirname, '../../../');

let mainWindow;
let tray;
let backendProcess;
let guiServer;
const guiPort = Number(process.env.GUI_PORT || 48233);

// Logging
log.transports.file.level = 'info';
autoUpdater.logger = log;

// Single Instance Lock
if (!app.requestSingleInstanceLock()) app.quit();
app.on('second-instance', () => {
  if (mainWindow && !mainWindow.isDestroyed()) {
    if (mainWindow.isMinimized()) mainWindow.restore();
    mainWindow.show();
    mainWindow.focus();
  }
});

// Electron-Switches (Headless/Server-Umgebung verträglicher)
app.disableHardwareAcceleration();
app.commandLine.appendSwitch('no-sandbox');
app.commandLine.appendSwitch('disable-setuid-sandbox');
app.commandLine.appendSwitch('disable-dev-shm-usage');

// ---- App lifecycle ----------------------------------------------------------
app.whenReady().then(() => {
  loadEnv();
  startBackend();
  startGuiServer();
  createMainWindow();
  createTray();
  if (!isDev && app.isPackaged) autoUpdater.checkForUpdatesAndNotify();
});

app.on('window-all-closed', () => {
  if (!isMac) {
    stopBackend();
    app.quit();
  }
});

app.on('before-quit', () => {
  stopBackend();
});

// ---- Helpers ----------------------------------------------------------------
function loadEnv() {
  const rootEnv = path.join(projectRoot, '.env');
  const localEnv = path.join(__dirname, '../.env');
  const envPath = fs.existsSync(rootEnv) ? rootEnv : localEnv;
  const defaultsPath = path.join(path.dirname(envPath), '.env.defaults');
  if (fs.existsSync(defaultsPath)) dotenv.config({ path: defaultsPath });
  dotenv.config({ path: envPath });
  log.info(`Loaded env from ${envPath}`);
}

// ---- GUI HTTP server (serves ./gui and ./voice-assistant-apps/shared) -------
function startGuiServer() {
  const guiRoot = path.join(projectRoot, 'gui');
  const shared = path.join(projectRoot, 'voice-assistant-apps', 'shared');
  const mime = {
    '.html':'text/html','.js':'application/javascript','.mjs':'application/javascript',
    '.css':'text/css','.json':'application/json','.png':'image/png','.jpg':'image/jpeg',
    '.jpeg':'image/jpeg','.svg':'image/svg+xml','.ico':'image/x-icon','.wav':'audio/wav',
    '.mp3':'audio/mpeg','.wasm':'application/wasm'
  };
  const safe = p => path.normalize(p).replace(/^(\.\.(\/|\\|$))+/, '');

  guiServer = http.createServer((req, res) => {
    try {
      let reqPath = decodeURIComponent(url.parse(req.url).pathname || '/');
      if (reqPath === '/') reqPath = '/index.html';
      let filePath = path.join(guiRoot, safe(reqPath));
      // Allow access to shared/ if requested
      if (!fs.existsSync(filePath) && reqPath.startsWith('/voice-assistant-apps/shared/')) {
        filePath = path.join(shared, safe(reqPath.replace(/^\/voice-assistant-apps\/shared\//,'')));
      }
      if (!fs.existsSync(filePath)) { res.statusCode = 404; return res.end('Not Found'); }
      const ext = path.extname(filePath);
      res.setHeader('Content-Type', mime[ext] || 'application/octet-stream');
      fs.createReadStream(filePath).pipe(res);
    } catch (e) {
      res.statusCode = 500; res.end('Server error');
    }
  }).listen(guiPort, '127.0.0.1', () => log.info(`GUI static server: http://127.0.0.1:${guiPort}`));

  guiServer.on('error', (e) => log.error('GUI server error', e));
}

// ---- Main window ------------------------------------------------------------
function createMainWindow() {
  // prefer your own icons
  let iconPath = path.join(projectRoot, 'gui', 'icons', 'icon-512x512.png');
  if (!fs.existsSync(iconPath)) iconPath = path.join(projectRoot, 'gui', 'icons', 'icon.png');

  const preload = path.join(__dirname, 'preload.js');
  const hasPreload = fs.existsSync(preload);

  mainWindow = new BrowserWindow({
    width: 1200,
    height: 900,
    minWidth: 800,
    minHeight: 600,
    show: false,
    backgroundColor: '#0f0f23',
    icon: fs.existsSync(iconPath) ? iconPath : undefined,
    titleBarStyle: isMac ? 'hiddenInset' : 'default',
    webPreferences: {
      contextIsolation: true,
      nodeIntegration: false,
      sandbox: false,
      webSecurity: true,
      preload: hasPreload ? preload : undefined
    }
  });

  mainWindow.loadURL(`http://127.0.0.1:${guiPort}/`);

  // Better diagnostics
  mainWindow.webContents.on('did-fail-load', (e, code, desc, url) => {
    log.error(`GUI did-fail-load: ${code} ${desc} @ ${url}`);
    dialog.showErrorBox('GUI-Fehler', `Konnte GUI nicht laden:\n${desc} (Code ${code})`);
  });
  mainWindow.webContents.on('did-finish-load', () => {
    log.info('GUI did-finish-load');
  });

  mainWindow.once('ready-to-show', () => {
    try { mainWindow.show(); } catch {}
    if (isDev) mainWindow.webContents.openDevTools();
  });

  mainWindow.on('closed', () => { mainWindow = null; });

  mainWindow.webContents.setWindowOpenHandler(({ url }) => {
    shell.openExternal(url);
    return { action: 'deny' };
  });

  createMenu();
}

// ---- Tray -------------------------------------------------------------------
function createTray() {
  let trayImg = nativeImage.createFromPath(path.join(projectRoot,'gui','icons','icon.png'));
  if (!trayImg || (trayImg.isEmpty && trayImg.isEmpty())) trayImg = nativeImage.createEmpty();
  tray = new Tray(trayImg.resize({ width: 16, height: 16 }));
  const menu = Menu.buildFromTemplate([
    { label: 'KI-Sprachassistent', enabled: false },
    { type: 'separator' },
    { label: 'Öffnen', click: () => { if (mainWindow) { mainWindow.show(); mainWindow.focus(); } } },
    { label: 'Minimieren', click: () => { if (mainWindow) mainWindow.hide(); } },
    { type: 'separator' },
    { label: 'Beenden', click: () => { app.isQuiting = true; app.quit(); } }
  ]);
  tray.setContextMenu(menu);
  tray.setToolTip('KI-Sprachassistent');
  tray.on('click', () => {
    if (!mainWindow) return;
    if (mainWindow.isVisible()) mainWindow.hide(); else { mainWindow.show(); mainWindow.focus(); }
  });
}

// ---- Backend ----------------------------------------------------------------
function startBackend() {
  try {
    const pythonVenv = path.join(projectRoot, '.venv', 'bin', 'python');
    const pythonCmd = fs.existsSync(pythonVenv) ? pythonVenv : (process.env.PYTHON_EXECUTABLE || 'python3');
    const serverScript = path.join(projectRoot, 'backend', 'ws-server', 'ws-server.py');

    const env = { ...process.env, PYTHONPATH: projectRoot };
    log.info(`Starting backend with: ${pythonCmd} ${serverScript}`);

    backendProcess = spawn(pythonCmd, [serverScript], { cwd: projectRoot, env });

    backendProcess.stdout.on('data', (data) => {
      const msg = data.toString();
      log.info(`[backend] ${msg}`);
      if (mainWindow && !mainWindow.isDestroyed() && mainWindow.webContents && !mainWindow.webContents.isDestroyed()) {
        mainWindow.webContents.send('backend-log', msg);
      }
    });
    backendProcess.stderr.on('data', (data) => {
      const msg = data.toString();
      log.error(`[backend] ${msg}`);
      if (mainWindow && !mainWindow.isDestroyed() && mainWindow.webContents && !mainWindow.webContents.isDestroyed()) {
        mainWindow.webContents.send('backend-error', msg);
      }
    });
    backendProcess.on('spawn', () => log.info('Backend process started'));
    backendProcess.on('close', (code) => log.info(`Backend exited with code ${code}`));
    backendProcess.on('error', (err) => {
      log.error('Failed to start backend:', err);
      dialog.showErrorBox('Backend-Start fehlgeschlagen', err.message || String(err));
    });
  } catch (err) {
    log.error('Failed to start backend (outer):', err);
    dialog.showErrorBox('Backend-Start fehlgeschlagen', err.message || String(err));
  }
}

function stopBackend() {
  if (backendProcess) {
    try { backendProcess.kill(); } catch {}
    backendProcess = null;
  }
}

// ---- Menu -------------------------------------------------------------------
function createMenu() {
  const template = [
    {
      label: 'Datei',
      submenu: [
        { role: 'quit', label: 'Beenden' }
      ]
    },
    {
      label: 'Ansicht',
      submenu: [
        { role: 'reload', label: 'Neu laden' },
        { role: 'toggleDevTools', label: 'Entwicklertools' },
        { type: 'separator' },
        { role: 'resetZoom', label: 'Zoom zurücksetzen' },
        { role: 'zoomIn', label: 'Vergrößern' },
        { role: 'zoomOut', label: 'Verkleinern' },
        { type: 'separator' },
        { role: 'togglefullscreen', label: 'Vollbild' }
      ]
    }
  ];
  const menu = Menu.buildFromTemplate(template);
  Menu.setApplicationMenu(menu);
}

// ---- IPC (Beispiel) ---------------------------------------------------------
ipcMain.handle('get-app-version', () => app.getVersion());
